#!/bin/bash
#
# stego - a steganography tool to hide things in JPG images.
#
# Why? Sometimes you need to pass things along restrictive firewalls and other
# rules that make no sense, but images are usually not restricted. Here's where
# this script come in handy: add whatever (small) file to a random (or not) 
# JPG image and freely pass it around, upload it to forums, etc.
#
# You may encrypt the content *before* you add it to the JPG via stego just in
# case people do find out about the hidden data. stego will *not* do that for
# you.
#
# USAGE: stego IMAGE.jpg FILE1 FILE2 ... FILEN 
# Where IMAGE is the JPG file used to hide the FILEs.
# 
# A good hint: the larger the IMAGE used, the less suspicious it will look, 
# since most of the size will correspond to the image itself, not the data.
#
# FIXME: filenames cannot have spaces in them. This is due to a limitation in 
# how bash handles arrays. Sorry...
#
# Copyright 2020 kzimmermann - all rights reserved
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#  

# test for requirements
if [ -z "$(which zip)" ]
then
    echo "This script requires the \`zip' package to work"
    echo "This is because the only known way to do steganography with an image is through a zip file (or rar, but this format sucks), so no tar.gz"
    echo "Please install \`zip' through your package manage to use stego."
    exit 1
fi

# Do not edit, will be overwritten during execution...
IMAGE=""
FILELIST=""

if [[ $(echo "${1: -3}") != "jpg" ]]
then
    echo "Error: please specify a JPG image to be used as the container."
    exit 1
elif [ ! -f "$1" ]
then
    echo "Error: image '$1' not found."
    exit 1
else
    IMAGE="$1"
    shift
fi

while [ "$1" ]
do
    if [ -f "$1" ]
    then
        FILELIST="$FILELIST $1"
    else
        echo "Error: file '$1' not found."
        exit 1
    fi
    shift
done

# Output filename:
OUTPUT="${IMAGE/.jpg/$RANDOM.jpg}"

# the way that steganography works is this:
#  - make a .zip file with everything you wish to hide.
#  - "glue" this .zip to the bottom of a .jpg file. It will open as normal.
#  - to access the data, rename image.jpg to image.zip, and extract normally.

zip data.zip $FILELIST
cat "$IMAGE" data.zip > "$OUTPUT"
rm data.zip

echo "Data stored secretly in file $OUTPUT"
